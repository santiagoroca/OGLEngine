{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"regex","disambiguator":[12164899792951966563,3285629277939125921]},"crate_root":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src","external_crates":[{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6785828555626060348,18365780124326373934]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3048805336968905485,4980691481921658650]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3407561472757817875,1351945422460256062]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[2660593820577233037,393283886409214049]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[16596314416531236519,4176213262415654040]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6390711064481481624,17927547539550525863]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14535859162738561032,2138739971074829481]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[12481289365202144020,14984301150462321989]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[15118851582106700348,14770776934942075514]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":10,"id":{"name":"aho_corasick","disambiguator":[14499880546238918623,5276254079170094348]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":11,"id":{"name":"memchr","disambiguator":[12131851168998151816,15918295467945234922]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":12,"id":{"name":"libc","disambiguator":[18350172964409788339,18407998293865094753]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":13,"id":{"name":"thread_local","disambiguator":[10351588513746978393,8951016380278327502]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":14,"id":{"name":"unreachable","disambiguator":[15488220545381378297,15851114670916841811]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":15,"id":{"name":"void","disambiguator":[17056051685594845500,5478000839621388662]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":16,"id":{"name":"lazy_static","disambiguator":[7293228725158145867,11158339771708373859]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":17,"id":{"name":"regex_syntax","disambiguator":[15131123082857894387,7396438005943440780]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":18,"id":{"name":"ucd_util","disambiguator":[5883212067756863205,4888320718609737147]}},{"file_name":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","num":19,"id":{"name":"utf8_ranges","disambiguator":[13557651786031200512,10384456013633511615]}}],"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":23466,"line_start":11,"line_end":684,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2406},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18637,"byte_end":18642,"line_start":537,"line_end":537,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18701,"byte_end":18702,"line_start":539,"line_end":539,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18765,"byte_end":18766,"line_start":541,"line_end":541,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18821,"byte_end":18822,"line_start":543,"line_end":543,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1670},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18870,"byte_end":18879,"line_start":545,"line_end":545,"column_start":19,"column_end":28},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3314},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18935,"byte_end":18940,"line_start":548,"line_end":548,"column_start":5,"column_end":10},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3292},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18942,"byte_end":18947,"line_start":548,"line_end":548,"column_start":12,"column_end":17},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1886},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18949,"byte_end":18957,"line_start":548,"line_end":548,"column_start":19,"column_end":27},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18963,"byte_end":18975,"line_start":549,"line_end":549,"column_start":5,"column_end":17},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1938},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18977,"byte_end":18984,"line_start":549,"line_end":549,"column_start":19,"column_end":26},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1930},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18986,"byte_end":19000,"line_start":549,"line_end":549,"column_start":28,"column_end":42},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1922},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19002,"byte_end":19019,"line_start":549,"line_end":549,"column_start":44,"column_end":61},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19025,"byte_end":19033,"line_start":550,"line_end":550,"column_start":5,"column_end":13},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3320},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19035,"byte_end":19046,"line_start":550,"line_end":550,"column_start":15,"column_end":26},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1970},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19048,"byte_end":19056,"line_start":550,"line_end":550,"column_start":28,"column_end":36},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1870},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19058,"byte_end":19063,"line_start":550,"line_end":550,"column_start":38,"column_end":43},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1878},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19065,"byte_end":19071,"line_start":550,"line_end":550,"column_start":45,"column_end":51},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19077,"byte_end":19083,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22549,"byte_end":22550,"line_start":643,"line_end":643,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22587,"byte_end":22588,"line_start":644,"line_end":644,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22612,"byte_end":22613,"line_start":645,"line_end":645,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22642,"byte_end":22643,"line_start":646,"line_end":646,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1670},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22667,"byte_end":22676,"line_start":647,"line_end":647,"column_start":23,"column_end":32},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23266,"byte_end":23274,"line_start":679,"line_end":679,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":614},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23295,"byte_end":23299,"line_start":680,"line_end":680,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23301,"byte_end":23312,"line_start":680,"line_end":680,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2556},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23335,"byte_end":23339,"line_start":681,"line_end":681,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":850},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23341,"byte_end":23346,"line_start":681,"line_end":681,"column_start":27,"column_end":32},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2532},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23348,"byte_end":23357,"line_start":681,"line_end":681,"column_start":34,"column_end":43},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2520},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23359,"byte_end":23366,"line_start":681,"line_end":681,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2678},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23390,"byte_end":23405,"line_start":682,"line_end":682,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2764},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23426,"byte_end":23433,"line_start":683,"line_end":683,"column_start":20,"column_end":27},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2770},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23435,"byte_end":23439,"line_start":683,"line_end":683,"column_start":29,"column_end":33},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2810},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23441,"byte_end":23450,"line_start":683,"line_end":683,"column_start":35,"column_end":44},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":2124}},{"kind":"Use","ref_id":{"krate":0,"index":2840},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23452,"byte_end":23462,"line_start":683,"line_end":683,"column_start":46,"column_end":56},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":2124}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":23466,"line_start":11,"line_end":684,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":54},{"krate":0,"index":66},{"krate":0,"index":114},{"krate":0,"index":134},{"krate":0,"index":322},{"krate":0,"index":536},{"krate":0,"index":556},{"krate":0,"index":778},{"krate":0,"index":804},{"krate":0,"index":808},{"krate":0,"index":978},{"krate":0,"index":1288},{"krate":0,"index":1338},{"krate":0,"index":1416},{"krate":0,"index":1426},{"krate":0,"index":1662},{"krate":0,"index":1666},{"krate":0,"index":1740},{"krate":0,"index":1978},{"krate":0,"index":2014},{"krate":0,"index":2124}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18180,"byte_end":18202,"line_start":520,"line_end":520,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22510,"byte_end":22515,"line_start":642,"line_end":642,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22474,"byte_end":22501,"line_start":641,"line_end":641,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44304,"byte_end":44312,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44723,"byte_end":44726,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":45321,"byte_end":45331,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46075,"byte_end":46080,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is resposible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46363,"byte_end":46372,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":46855,"byte_end":46858,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47093,"byte_end":47100,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":47454,"byte_end":47461,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":961},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":158728,"byte_end":158734,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":965},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":158854,"byte_end":158868,"line_start":21,"line_end":21,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":969},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159155,"byte_end":159170,"line_start":28,"line_end":28,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2406},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":158692,"byte_end":158697,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":965},{"krate":0,"index":969}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":162187,"byte_end":162191,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2418},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":162562,"byte_end":162572,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":975}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":162811,"byte_end":162824,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":164532,"byte_end":164543,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165144,"byte_end":165147,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165473,"byte_end":165481,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":165781,"byte_end":165792,"line_start":136,"line_end":136,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166290,"byte_end":166299,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":166614,"byte_end":166617,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167108,"byte_end":167128,"line_start":175,"line_end":175,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167696,"byte_end":167701,"line_start":189,"line_end":189,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":167972,"byte_end":167981,"line_start":198,"line_end":198,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":168104,"byte_end":168111,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":171220,"byte_end":171225,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":196629,"byte_end":196644,"line_start":1010,"line_end":1010,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync<'c>>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198389,"byte_end":198405,"line_start":1064,"line_end":1064,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync<'c>>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198534,"byte_end":198550,"line_start":1070,"line_end":1070,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr<'c>>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198749,"byte_end":198757,"line_start":1078,"line_end":1078,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198691,"byte_end":198708,"line_start":1077,"line_end":1077,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199148,"byte_end":199160,"line_start":1088,"line_end":1088,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199090,"byte_end":199107,"line_start":1087,"line_end":1087,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199286,"byte_end":199296,"line_start":1093,"line_end":1093,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199427,"byte_end":199441,"line_start":1098,"line_end":1098,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199616,"byte_end":199631,"line_start":1103,"line_end":1103,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199789,"byte_end":199808,"line_start":1108,"line_end":1108,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":199995,"byte_end":200008,"line_start":1114,"line_end":1114,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200165,"byte_end":200178,"line_start":1121,"line_end":1121,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200353,"byte_end":200369,"line_start":1127,"line_end":1127,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2520},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":219784,"byte_end":219791,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1069},{"krate":0,"index":1071}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":219773,"byte_end":219862,"line_start":25,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":219963,"byte_end":219971,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220098,"byte_end":220104,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220350,"byte_end":220354,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220448,"byte_end":220452,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220579,"byte_end":220582,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220727,"byte_end":220735,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220843,"byte_end":220846,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":220967,"byte_end":220975,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":850},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221101,"byte_end":221106,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221179,"byte_end":221181,"line_start":81,"line_end":81,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221358,"byte_end":221367,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221548,"byte_end":221561,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221701,"byte_end":221715,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221822,"byte_end":221831,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":221981,"byte_end":221984,"line_start":105,"line_end":105,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222046,"byte_end":222054,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222153,"byte_end":222161,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":850},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2532},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222905,"byte_end":222914,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222894,"byte_end":222929,"line_start":140,"line_end":140,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223033,"byte_end":223036,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput<'t>>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2556},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":228978,"byte_end":228982,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":228967,"byte_end":228988,"line_start":346,"line_end":346,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":228967,"byte_end":228988,"line_start":346,"line_end":346,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229306,"byte_end":229313,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229285,"byte_end":229294,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229505,"byte_end":229513,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229484,"byte_end":229493,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229736,"byte_end":229748,"line_start":373,"line_end":373,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229968,"byte_end":229980,"line_start":380,"line_end":380,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2678},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":232007,"byte_end":232022,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"LiteralSearcher","qualname":"::literal::LiteralSearcher","value":"LiteralSearcher {  }","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1161},{"krate":0,"index":1163},{"krate":0,"index":1165}],"decl_id":null,"docs":" A prefix extracted from a compiled regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":232963,"byte_end":232968,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher that never matches and never advances the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":233119,"byte_end":233127,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal prefixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":233320,"byte_end":233328,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (lits: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for literal suffixes from the given set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234189,"byte_end":234197,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all matches comprise the entire regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234393,"byte_end":234397,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Find the position of a literal in `haystack` if it exists.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":234335,"byte_end":234352,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":235091,"byte_end":235101,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must start at index `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":235489,"byte_end":235497,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, haystack: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Like find, except matches must end at index `haystack.len()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":235922,"byte_end":235926,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"iter","qualname":"<LiteralSearcher>::iter","value":"fn (&self) -> LiteralIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all literals to be matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":236648,"byte_end":236651,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"name":"lcp","qualname":"<LiteralSearcher>::lcp","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common prefix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":236786,"byte_end":236789,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"lcs","qualname":"<LiteralSearcher>::lcs","value":"fn (&self) -> &FreqyPacked","parent":null,"children":[],"decl_id":null,"docs":" Returns a matcher for the longest common suffix of this matcher.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":236898,"byte_end":236906,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this prefix is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237022,"byte_end":237025,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of prefixes in this machine.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237462,"byte_end":237478,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of literals in bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":269},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240750,"byte_end":240755,"line_start":266,"line_end":266,"column_start":5,"column_end":10},"name":"Empty","qualname":"::literal::LiteralIter::Empty","value":"LiteralIter::Empty","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":271},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240761,"byte_end":240766,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::literal::LiteralIter::Bytes","value":"LiteralIter::Bytes(&'a [u8])","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":275},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240782,"byte_end":240788,"line_start":268,"line_end":268,"column_start":5,"column_end":11},"name":"Single","qualname":"::literal::LiteralIter::Single","value":"LiteralIter::Single(&'a [u8])","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":279},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240804,"byte_end":240806,"line_start":269,"line_end":269,"column_start":5,"column_end":7},"name":"AC","qualname":"::literal::LiteralIter::AC","value":"LiteralIter::AC(&'a [Literal])","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":283},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240827,"byte_end":240837,"line_start":270,"line_end":270,"column_start":5,"column_end":15},"name":"TeddySSSE3","qualname":"::literal::LiteralIter::TeddySSSE3","value":"LiteralIter::TeddySSSE3(&'a [Vec<u8>])","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":287},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240858,"byte_end":240867,"line_start":271,"line_end":271,"column_start":5,"column_end":14},"name":"TeddyAVX2","qualname":"::literal::LiteralIter::TeddyAVX2","value":"LiteralIter::TeddyAVX2(&'a [Vec<u8>])","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1212},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240728,"byte_end":240739,"line_start":265,"line_end":265,"column_start":10,"column_end":21},"name":"LiteralIter","qualname":"::literal::LiteralIter","value":"LiteralIter::{Empty, Bytes, Single, AC, TeddySSSE3, TeddyAVX2}","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":283},{"krate":0,"index":287}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2708},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":245467,"byte_end":245478,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"FreqyPacked","qualname":"::literal::FreqyPacked","value":"FreqyPacked {  }","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1211}],"decl_id":null,"docs":" Provides an implementation of fast subtring search using frequency\n analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":247921,"byte_end":247925,"line_start":496,"line_end":496,"column_start":12,"column_end":16},"name":"find","qualname":"<FreqyPacked>::find","value":"fn (&self, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":247863,"byte_end":247880,"line_start":495,"line_end":495,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":248753,"byte_end":248762,"line_start":522,"line_end":522,"column_start":12,"column_end":21},"name":"is_suffix","qualname":"<FreqyPacked>::is_suffix","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":248695,"byte_end":248712,"line_start":521,"line_end":521,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":248937,"byte_end":248940,"line_start":529,"line_end":529,"column_start":12,"column_end":15},"name":"len","qualname":"<FreqyPacked>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":249000,"byte_end":249008,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"char_len","qualname":"<FreqyPacked>::char_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2764},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":333344,"byte_end":333351,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1259},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":333421,"byte_end":333426,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1261},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":333591,"byte_end":333598,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1263},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":333732,"byte_end":333740,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1265},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":333833,"byte_end":333849,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1267},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334206,"byte_end":334211,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1269},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334325,"byte_end":334337,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1271},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334416,"byte_end":334425,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1273},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334549,"byte_end":334557,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1275},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334746,"byte_end":334752,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1277},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334858,"byte_end":334868,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1279},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":334950,"byte_end":334967,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1281},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":335045,"byte_end":335060,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1283},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":335151,"byte_end":335176,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1285},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":335268,"byte_end":335276,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::LiteralSearcher","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1287},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":336103,"byte_end":336117,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2764},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":336243,"byte_end":336246,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":336961,"byte_end":336965,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":337279,"byte_end":337293,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":337819,"byte_end":337832,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338039,"byte_end":338049,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338284,"byte_end":338293,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":338441,"byte_end":338457,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343137,"byte_end":343142,"line_start":266,"line_end":266,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343272,"byte_end":343276,"line_start":269,"line_end":269,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343411,"byte_end":343416,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343576,"byte_end":343585,"line_start":275,"line_end":275,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1305},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343727,"byte_end":343731,"line_start":278,"line_end":278,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":343905,"byte_end":343911,"line_start":281,"line_end":281,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344109,"byte_end":344114,"line_start":285,"line_end":285,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":2770},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2770},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":342708,"byte_end":342712,"line_start":258,"line_end":258,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1293},{"krate":0,"index":1297},{"krate":0,"index":1301},{"krate":0,"index":1305},{"krate":0,"index":1309},{"krate":0,"index":1313}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344218,"byte_end":344226,"line_start":290,"line_end":290,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2780},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344424,"byte_end":344432,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1319}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1317},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344496,"byte_end":344500,"line_start":302,"line_end":302,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1319},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344655,"byte_end":344659,"line_start":305,"line_end":305,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2790},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344751,"byte_end":344760,"line_start":310,"line_end":310,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1323}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1321},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344916,"byte_end":344921,"line_start":313,"line_end":313,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":2790},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1323},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345086,"byte_end":345091,"line_start":316,"line_end":316,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":2790},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2800},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345191,"byte_end":345204,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1327}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1325},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345305,"byte_end":345309,"line_start":324,"line_end":324,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":2800},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1327},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345379,"byte_end":345383,"line_start":326,"line_end":326,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":2800},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1329},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345547,"byte_end":345556,"line_start":333,"line_end":333,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345592,"byte_end":345599,"line_start":335,"line_end":335,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1333},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345629,"byte_end":345638,"line_start":337,"line_end":337,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1335},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345666,"byte_end":345673,"line_start":339,"line_end":339,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1337},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345747,"byte_end":345759,"line_start":341,"line_end":341,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1339},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345839,"byte_end":345854,"line_start":343,"line_end":343,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1341},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345889,"byte_end":345906,"line_start":345,"line_end":345,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1343},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345945,"byte_end":345965,"line_start":347,"line_end":347,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2810},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345499,"byte_end":345508,"line_start":331,"line_end":331,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1343}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345490,"byte_end":345968,"line_start":331,"line_end":348,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":345490,"byte_end":345968,"line_start":331,"line_end":348,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2830},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346049,"byte_end":346057,"line_start":352,"line_end":352,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1347}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1345},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346158,"byte_end":346162,"line_start":355,"line_end":355,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":2830},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1347},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346212,"byte_end":346213,"line_start":357,"line_end":357,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":2830},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2840},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346305,"byte_end":346315,"line_start":362,"line_end":362,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1351}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1349},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346416,"byte_end":346420,"line_start":365,"line_end":365,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":2840},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1351},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346495,"byte_end":346501,"line_start":367,"line_end":367,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":2840},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346628,"byte_end":346635,"line_start":372,"line_end":372,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347421,"byte_end":347430,"line_start":397,"line_end":397,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2850},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347685,"byte_end":347694,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1357}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1353},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347795,"byte_end":347799,"line_start":410,"line_end":410,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1355},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347868,"byte_end":347873,"line_start":412,"line_end":412,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1357},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347935,"byte_end":347938,"line_start":414,"line_end":414,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":348044,"byte_end":348051,"line_start":419,"line_end":419,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2860},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348742,"byte_end":348754,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1379}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348708,"byte_end":348730,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1359},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348765,"byte_end":348769,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1361},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348792,"byte_end":348802,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1363},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348819,"byte_end":348833,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1365},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348850,"byte_end":348860,"line_start":18,"line_end":18,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1367},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348875,"byte_end":348891,"line_start":19,"line_end":19,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1369},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348907,"byte_end":348917,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1371},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348933,"byte_end":348953,"line_start":21,"line_end":21,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1373},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348969,"byte_end":348979,"line_start":22,"line_end":22,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":348995,"byte_end":349012,"line_start":23,"line_end":23,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1377},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":349028,"byte_end":349035,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1379},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":349051,"byte_end":349056,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":2860},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3022},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364182,"byte_end":364187,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1411}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364171,"byte_end":364249,"line_start":30,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364171,"byte_end":364249,"line_start":30,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364368,"byte_end":364373,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"start","qualname":"<Match<'t>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364347,"byte_end":364356,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364512,"byte_end":364515,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"end","qualname":"<Match<'t>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364491,"byte_end":364500,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364617,"byte_end":364625,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match<'t>>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364596,"byte_end":364605,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3044},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":365639,"byte_end":365644,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366703,"byte_end":366706,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":367437,"byte_end":367445,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":368307,"byte_end":368311,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":369027,"byte_end":369036,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":372043,"byte_end":372051,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":373481,"byte_end":373494,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":374412,"byte_end":374417,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":375433,"byte_end":375439,"line_start":343,"line_end":343,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":380222,"byte_end":380229,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":380686,"byte_end":380697,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":381166,"byte_end":381174,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":383649,"byte_end":383663,"line_start":561,"line_end":561,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":384070,"byte_end":384087,"line_start":572,"line_end":572,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":384550,"byte_end":384561,"line_start":587,"line_end":587,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":384977,"byte_end":384984,"line_start":598,"line_end":598,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":385540,"byte_end":385556,"line_start":614,"line_end":614,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut Locations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":385901,"byte_end":385907,"line_start":628,"line_end":628,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386030,"byte_end":386043,"line_start":633,"line_end":633,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386179,"byte_end":386191,"line_start":638,"line_end":638,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386391,"byte_end":386400,"line_start":645,"line_end":645,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> Locations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of locations that can be reused in multiple calls\n to `read_captures`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1538},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386865,"byte_end":386872,"line_start":658,"line_end":658,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1546},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":387445,"byte_end":387459,"line_start":676,"line_end":676,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1554},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":388040,"byte_end":388045,"line_start":694,"line_end":694,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":395}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1562},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389028,"byte_end":389034,"line_start":729,"line_end":729,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389729,"byte_end":389741,"line_start":757,"line_end":757,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1580},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":390665,"byte_end":390673,"line_start":783,"line_end":783,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":391598,"byte_end":391601,"line_start":809,"line_end":809,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures<'t>>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":391886,"byte_end":391890,"line_start":815,"line_end":815,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures<'t>>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":392322,"byte_end":392326,"line_start":824,"line_end":824,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures<'t>>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393370,"byte_end":393376,"line_start":847,"line_end":847,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures<'t>>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393687,"byte_end":393690,"line_start":856,"line_end":856,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures<'t>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393666,"byte_end":393675,"line_start":855,"line_end":855,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396820,"byte_end":396837,"line_start":953,"line_end":953,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":481}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1630},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":397470,"byte_end":397478,"line_start":973,"line_end":973,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":397764,"byte_end":397778,"line_start":981,"line_end":981,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398189,"byte_end":398201,"line_start":990,"line_end":990,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":398932,"byte_end":398938,"line_start":1015,"line_end":1015,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3050},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399166,"byte_end":399177,"line_start":1024,"line_end":1024,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1654},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":400441,"byte_end":400449,"line_start":1062,"line_end":1062,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1670},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":416269,"byte_end":416278,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":416607,"byte_end":416610,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":417054,"byte_end":417058,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":417353,"byte_end":417356,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1682},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":417832,"byte_end":417850,"line_start":64,"line_end":64,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":521}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1692},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":419123,"byte_end":419127,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1780},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425061,"byte_end":425067,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3292},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425318,"byte_end":425323,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1505}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425307,"byte_end":425384,"line_start":39,"line_end":43,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425307,"byte_end":425384,"line_start":39,"line_end":43,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425503,"byte_end":425508,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"start","qualname":"<Match<'t>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425482,"byte_end":425491,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425647,"byte_end":425650,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"end","qualname":"<Match<'t>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425626,"byte_end":425635,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425752,"byte_end":425758,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match<'t>>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425731,"byte_end":425740,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3314},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428463,"byte_end":428468,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":429410,"byte_end":429413,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":430143,"byte_end":430151,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":431027,"byte_end":431031,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":431745,"byte_end":431754,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":434790,"byte_end":434798,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":436116,"byte_end":436129,"line_start":345,"line_end":345,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":436988,"byte_end":436993,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":437981,"byte_end":437987,"line_start":397,"line_end":397,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":442524,"byte_end":442531,"line_start":509,"line_end":509,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":442988,"byte_end":442999,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":443468,"byte_end":443476,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":446432,"byte_end":446446,"line_start":617,"line_end":617,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":446852,"byte_end":446869,"line_start":628,"line_end":628,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":447335,"byte_end":447346,"line_start":643,"line_end":643,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":447761,"byte_end":447768,"line_start":654,"line_end":654,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":448338,"byte_end":448354,"line_start":671,"line_end":671,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut Locations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":448728,"byte_end":448734,"line_start":687,"line_end":687,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":448857,"byte_end":448870,"line_start":692,"line_end":692,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":449006,"byte_end":449018,"line_start":697,"line_end":697,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":449218,"byte_end":449227,"line_start":704,"line_end":704,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> Locations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of locations that can be reused in multiple calls\n to `read_captures`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1860},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":449558,"byte_end":449570,"line_start":715,"line_end":715,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1870},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":450159,"byte_end":450164,"line_start":736,"line_end":736,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":625}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1878},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":451140,"byte_end":451146,"line_start":771,"line_end":771,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":637}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1886},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":452131,"byte_end":452139,"line_start":804,"line_end":804,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":453027,"byte_end":453030,"line_start":830,"line_end":830,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures<'t>>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":453315,"byte_end":453319,"line_start":836,"line_end":836,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures<'t>>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":453751,"byte_end":453755,"line_start":845,"line_end":845,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures<'t>>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":454799,"byte_end":454805,"line_start":868,"line_end":868,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures<'t>>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455112,"byte_end":455115,"line_start":877,"line_end":877,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures<'t>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455091,"byte_end":455100,"line_start":876,"line_end":876,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1922},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457793,"byte_end":457810,"line_start":959,"line_end":959,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":699}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1930},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":458437,"byte_end":458451,"line_start":980,"line_end":980,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1938},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459136,"byte_end":459143,"line_start":1001,"line_end":1001,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1946},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459709,"byte_end":459717,"line_start":1017,"line_end":1017,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1948},{"krate":0,"index":1950},{"krate":0,"index":1952}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460024,"byte_end":460038,"line_start":1025,"line_end":1025,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1950},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":460443,"byte_end":460455,"line_start":1034,"line_end":1034,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461176,"byte_end":461182,"line_start":1059,"line_end":1059,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3320},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461410,"byte_end":461421,"line_start":1068,"line_end":1068,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1970},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462658,"byte_end":462666,"line_start":1106,"line_end":1106,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3326},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":463545,"byte_end":463554,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464028,"byte_end":464031,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464198,"byte_end":464201,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464256,"byte_end":464264,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464323,"byte_end":464331,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464393,"byte_end":464399,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464559,"byte_end":464567,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464701,"byte_end":464706,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2124},"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23234,"byte_end":23242,"line_start":678,"line_end":678,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/home/santi/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2134},{"krate":0,"index":2144},{"krate":0,"index":2146}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"use_std\")","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23198,"byte_end":23225,"line_start":677,"line_end":677,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26201,"byte_end":26206,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26868,"byte_end":26875,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44565,"byte_end":44573,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":72306,"byte_end":72315,"line_start":778,"line_end":778,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":74492,"byte_end":74500,"line_start":841,"line_end":841,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":75433,"byte_end":75445,"line_start":874,"line_end":874,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":80315,"byte_end":80326,"line_start":1006,"line_end":1006,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":81525,"byte_end":81537,"line_start":1047,"line_end":1047,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":94526,"byte_end":94532,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":96827,"byte_end":96835,"line_start":295,"line_end":295,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":97257,"byte_end":97262,"line_start":312,"line_end":312,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":101493,"byte_end":101498,"line_start":423,"line_end":423,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":102287,"byte_end":102297,"line_start":447,"line_end":447,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":102601,"byte_end":102604,"line_start":457,"line_end":457,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":412},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":149968,"byte_end":149979,"line_start":1601,"line_end":1601,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":151840,"byte_end":151850,"line_start":1658,"line_end":1658,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152286,"byte_end":152290,"line_start":1684,"line_end":1684,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152866,"byte_end":152871,"line_start":1709,"line_end":1709,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153142,"byte_end":153153,"line_start":1719,"line_end":1719,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153575,"byte_end":153589,"line_start":1733,"line_end":1733,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154095,"byte_end":154105,"line_start":1751,"line_end":1751,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159204,"byte_end":159209,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159550,"byte_end":159555,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160204,"byte_end":160209,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":164850,"byte_end":164861,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":173437,"byte_end":173450,"line_start":337,"line_end":337,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":174488,"byte_end":174498,"line_start":372,"line_end":372,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":183685,"byte_end":183695,"line_start":605,"line_end":605,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":684},{"krate":0,"index":688},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":700},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":732},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198503,"byte_end":198516,"line_start":1069,"line_end":1069,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198640,"byte_end":198644,"line_start":1075,"line_end":1075,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200473,"byte_end":200477,"line_start":1132,"line_end":1132,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200627,"byte_end":200639,"line_start":1141,"line_end":1141,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":205989,"byte_end":206006,"line_start":1282,"line_end":1282,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":211143,"byte_end":211146,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":211242,"byte_end":211245,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":219869,"byte_end":219876,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222940,"byte_end":222949,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223123,"byte_end":223132,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223238,"byte_end":223247,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225366,"byte_end":225375,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225637,"byte_end":225646,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225755,"byte_end":225764,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229010,"byte_end":229014,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229224,"byte_end":229228,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230183,"byte_end":230187,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230269,"byte_end":230273,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230396,"byte_end":230400,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230629,"byte_end":230633,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":272953,"byte_end":272958,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":284490,"byte_end":284495,"line_start":363,"line_end":363,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":287282,"byte_end":287286,"line_start":444,"line_end":444,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":304751,"byte_end":304756,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":316292,"byte_end":316297,"line_start":673,"line_end":673,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152},{"krate":0,"index":1154},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":319085,"byte_end":319089,"line_start":754,"line_end":754,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":232859,"byte_end":232874,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237953,"byte_end":237960,"line_start":198,"line_end":198,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240909,"byte_end":240920,"line_start":274,"line_end":274,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242635,"byte_end":242648,"line_start":337,"line_end":337,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":246555,"byte_end":246566,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":251873,"byte_end":251889,"line_start":609,"line_end":609,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1282},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":322885,"byte_end":322890,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":323184,"byte_end":323187,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1324},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":332311,"byte_end":332318,"line_start":355,"line_end":355,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":336134,"byte_end":336141,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339095,"byte_end":339102,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339221,"byte_end":339228,"line_start":169,"line_end":169,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344135,"byte_end":344139,"line_start":288,"line_end":288,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346530,"byte_end":346540,"line_start":370,"line_end":370,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347952,"byte_end":347961,"line_start":417,"line_end":417,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":349084,"byte_end":349096,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364260,"byte_end":364265,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":365675,"byte_end":365680,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":365857,"byte_end":365862,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366167,"byte_end":366172,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366256,"byte_end":366261,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366472,"byte_end":366477,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":382848,"byte_end":382853,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":385831,"byte_end":385836,"line_start":626,"line_end":626,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386948,"byte_end":386955,"line_start":660,"line_end":660,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":387542,"byte_end":387556,"line_start":678,"line_end":678,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":388131,"byte_end":388136,"line_start":699,"line_end":699,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389115,"byte_end":389121,"line_start":734,"line_end":734,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389810,"byte_end":389822,"line_start":759,"line_end":759,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":390780,"byte_end":390788,"line_start":789,"line_end":789,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393766,"byte_end":393774,"line_start":861,"line_end":861,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394001,"byte_end":394014,"line_start":869,"line_end":869,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":395505,"byte_end":395513,"line_start":914,"line_end":914,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396149,"byte_end":396157,"line_start":935,"line_end":935,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396941,"byte_end":396958,"line_start":958,"line_end":958,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399260,"byte_end":399271,"line_start":1026,"line_end":1026,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399854,"byte_end":399855,"line_start":1048,"line_end":1048,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":400492,"byte_end":400500,"line_start":1064,"line_end":1064,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":416297,"byte_end":416306,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":417923,"byte_end":417941,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1686},{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":421432,"byte_end":421439,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":421714,"byte_end":421721,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1724}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":422943,"byte_end":422957,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":423242,"byte_end":423256,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1736},{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425395,"byte_end":425400,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428499,"byte_end":428504,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428681,"byte_end":428686,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428874,"byte_end":428879,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428963,"byte_end":428968,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1810},{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":429179,"byte_end":429184,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":445639,"byte_end":445644,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":448658,"byte_end":448663,"line_start":685,"line_end":685,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":449639,"byte_end":449651,"line_start":717,"line_end":717,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":450250,"byte_end":450255,"line_start":741,"line_end":741,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1876}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":451227,"byte_end":451233,"line_start":776,"line_end":776,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1882},{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":452245,"byte_end":452253,"line_start":810,"line_end":810,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455191,"byte_end":455199,"line_start":882,"line_end":882,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455426,"byte_end":455439,"line_start":890,"line_end":890,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":456486,"byte_end":456494,"line_start":920,"line_end":920,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1912},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457126,"byte_end":457134,"line_start":941,"line_end":941,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1918},{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457914,"byte_end":457931,"line_start":964,"line_end":964,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1926},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":458537,"byte_end":458551,"line_start":982,"line_end":982,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459222,"byte_end":459229,"line_start":1003,"line_end":1003,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461504,"byte_end":461515,"line_start":1070,"line_end":1070,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462092,"byte_end":462093,"line_start":1092,"line_end":1092,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462708,"byte_end":462716,"line_start":1108,"line_end":1108,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464005,"byte_end":464014,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1986},{"krate":0,"index":1988},{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1996},{"krate":0,"index":1998}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464767,"byte_end":464776,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2002},{"krate":0,"index":2004}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":465292,"byte_end":465309,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2024},{"krate":0,"index":2026},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":467008,"byte_end":467013,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2040},{"krate":0,"index":2042},{"krate":0,"index":2044},{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2058},{"krate":0,"index":2060},{"krate":0,"index":2062},{"krate":0,"index":2064}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":470796,"byte_end":470801,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2068}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":471439,"byte_end":471457,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":473777,"byte_end":473782,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2094},{"krate":0,"index":2096},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":476556,"byte_end":476561,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26201,"byte_end":26206,"line_start":70,"line_end":70,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":2162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,98,97,99,107,116,114,97,99,107,46,114,115],"byte_start":26868,"byte_end":26875,"line_start":89,"line_end":89,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":2156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":44565,"byte_end":44573,"line_start":48,"line_end":48,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":72306,"byte_end":72315,"line_start":778,"line_end":778,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":2196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":74492,"byte_end":74500,"line_start":841,"line_end":841,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":2206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":75433,"byte_end":75445,"line_start":874,"line_end":874,"column_start":14,"column_end":26},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":80315,"byte_end":80326,"line_start":1006,"line_end":1006,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,99,111,109,112,105,108,101,46,114,115],"byte_start":81525,"byte_end":81537,"line_start":1047,"line_end":1047,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":94526,"byte_end":94532,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":2308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":96827,"byte_end":96835,"line_start":295,"line_end":295,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":358},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":97257,"byte_end":97262,"line_start":312,"line_end":312,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":2318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":101493,"byte_end":101498,"line_start":423,"line_end":423,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":2276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":102287,"byte_end":102297,"line_start":447,"line_end":447,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":2286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":102601,"byte_end":102604,"line_start":457,"line_end":457,"column_start":10,"column_end":13},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":2302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":149968,"byte_end":149979,"line_start":1601,"line_end":1601,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":2296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":151840,"byte_end":151850,"line_start":1658,"line_end":1658,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":2380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152286,"byte_end":152290,"line_start":1684,"line_end":1684,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":2338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":152866,"byte_end":152871,"line_start":1709,"line_end":1709,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":2318},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153142,"byte_end":153153,"line_start":1719,"line_end":1719,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":2296},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":153575,"byte_end":153589,"line_start":1733,"line_end":1733,"column_start":25,"column_end":39},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":510},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,100,102,97,46,114,115],"byte_start":154095,"byte_end":154105,"line_start":1751,"line_end":1751,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":2380},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159204,"byte_end":159209,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":2406},"to":{"krate":1,"index":2394}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":159550,"byte_end":159555,"line_start":45,"line_end":45,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":2406},"to":{"krate":2,"index":7764}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":160204,"byte_end":160209,"line_start":62,"line_end":62,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":2406},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":164850,"byte_end":164861,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":173437,"byte_end":173450,"line_start":337,"line_end":337,"column_start":32,"column_end":45},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":616},"to":{"krate":0,"index":1690}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":174488,"byte_end":174498,"line_start":372,"line_end":372,"column_start":32,"column_end":42},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":2418},"to":{"krate":0,"index":1690}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":183685,"byte_end":183695,"line_start":605,"line_end":605,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":2418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198503,"byte_end":198516,"line_start":1069,"line_end":1069,"column_start":10,"column_end":23},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":198640,"byte_end":198644,"line_start":1075,"line_end":1075,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200473,"byte_end":200477,"line_start":1132,"line_end":1132,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":614},"to":{"krate":2,"index":2566}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":200627,"byte_end":200639,"line_start":1141,"line_end":1141,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":2424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,101,99,46,114,115],"byte_start":205989,"byte_end":206006,"line_start":1282,"line_end":1282,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":2466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":211143,"byte_end":211146,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":2498},"to":{"krate":2,"index":2620}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,101,120,112,97,110,100,46,114,115],"byte_start":211242,"byte_end":211245,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":2498},"to":{"krate":2,"index":2620}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":219869,"byte_end":219876,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":2520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":222940,"byte_end":222949,"line_start":142,"line_end":142,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":2532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223123,"byte_end":223132,"line_start":149,"line_end":149,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":2532},"to":{"krate":2,"index":1972}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":223238,"byte_end":223247,"line_start":157,"line_end":157,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":2532},"to":{"krate":0,"index":850}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225366,"byte_end":225375,"line_start":232,"line_end":232,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":2544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225637,"byte_end":225646,"line_start":242,"line_end":242,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":2544},"to":{"krate":2,"index":1972}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":225755,"byte_end":225764,"line_start":250,"line_end":250,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":2544},"to":{"krate":0,"index":850}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229010,"byte_end":229014,"line_start":348,"line_end":348,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":2556},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":229224,"byte_end":229228,"line_start":357,"line_end":357,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":2556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230183,"byte_end":230187,"line_start":388,"line_end":388,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":2556},"to":{"krate":2,"index":2620}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230269,"byte_end":230273,"line_start":392,"line_end":392,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":2556},"to":{"krate":2,"index":2620}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230396,"byte_end":230400,"line_start":398,"line_end":398,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":2556},"to":{"krate":2,"index":2378}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":230629,"byte_end":230633,"line_start":408,"line_end":408,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":2556},"to":{"krate":2,"index":2432}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":272953,"byte_end":272958,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":2604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":284490,"byte_end":284495,"line_start":363,"line_end":363,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":2614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,97,118,120,50,47,105,109,112,46,114,115],"byte_start":287282,"byte_end":287286,"line_start":444,"line_end":444,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":2624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":304751,"byte_end":304756,"line_start":362,"line_end":362,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":2646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":316292,"byte_end":316297,"line_start":673,"line_end":673,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":2656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,116,101,100,100,121,95,115,115,115,101,51,47,105,109,112,46,114,115],"byte_start":319085,"byte_end":319089,"line_start":754,"line_end":754,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":2666},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":232859,"byte_end":232874,"line_start":58,"line_end":58,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":2678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":237953,"byte_end":237960,"line_start":198,"line_end":198,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":2688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":240909,"byte_end":240920,"line_start":274,"line_end":274,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":1212},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":242635,"byte_end":242648,"line_start":337,"line_end":337,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":2698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":246555,"byte_end":246566,"line_start":446,"line_end":446,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":2708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":251873,"byte_end":251889,"line_start":609,"line_end":609,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":2718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":322885,"byte_end":322890,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":2734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":323184,"byte_end":323187,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":2728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,105,107,101,118,109,46,114,115],"byte_start":332311,"byte_end":332318,"line_start":355,"line_end":355,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":2744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":336134,"byte_end":336141,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":2764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339095,"byte_end":339102,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":2764},"to":{"krate":2,"index":1972}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":339221,"byte_end":339228,"line_start":169,"line_end":169,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":2764},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":344135,"byte_end":344139,"line_start":288,"line_end":288,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":2770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":346530,"byte_end":346540,"line_start":370,"line_end":370,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":2840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,112,114,111,103,46,114,115],"byte_start":347952,"byte_end":347961,"line_start":417,"line_end":417,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":2850},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,117,105,108,100,101,114,46,114,115],"byte_start":349084,"byte_end":349096,"line_start":28,"line_end":28,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":2860},"to":{"krate":2,"index":2600}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":364260,"byte_end":364265,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":3022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":365675,"byte_end":365680,"line_start":80,"line_end":80,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":3044},"to":{"krate":2,"index":7764}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":365857,"byte_end":365862,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":3044},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366167,"byte_end":366172,"line_start":98,"line_end":98,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":3044},"to":{"krate":2,"index":2620}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366256,"byte_end":366261,"line_start":104,"line_end":104,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":3044},"to":{"krate":2,"index":6638}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":366472,"byte_end":366477,"line_start":114,"line_end":114,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":3044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":382848,"byte_end":382853,"line_start":539,"line_end":539,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":3044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":385831,"byte_end":385836,"line_start":626,"line_end":626,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":3044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":386948,"byte_end":386955,"line_start":660,"line_end":660,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":387542,"byte_end":387556,"line_start":678,"line_end":678,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1546},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":388131,"byte_end":388136,"line_start":699,"line_end":699,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1554},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389115,"byte_end":389121,"line_start":734,"line_end":734,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1562},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":389810,"byte_end":389822,"line_start":759,"line_end":759,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":390780,"byte_end":390788,"line_start":789,"line_end":789,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":393766,"byte_end":393774,"line_start":861,"line_end":861,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1580},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":394001,"byte_end":394014,"line_start":869,"line_end":869,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1598},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":395505,"byte_end":395513,"line_start":914,"line_end":914,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1580},"to":{"krate":2,"index":2066}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396149,"byte_end":396157,"line_start":935,"line_end":935,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":1580},"to":{"krate":2,"index":2066}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":396941,"byte_end":396958,"line_start":958,"line_end":958,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1622},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399260,"byte_end":399271,"line_start":1026,"line_end":1026,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":3050},"to":{"krate":0,"index":1630}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":399854,"byte_end":399855,"line_start":1048,"line_end":1048,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":503},"to":{"krate":0,"index":1630}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,98,121,116,101,115,46,114,115],"byte_start":400492,"byte_end":400500,"line_start":1064,"line_end":1064,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1654},"to":{"krate":0,"index":1630}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":416297,"byte_end":416306,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":417923,"byte_end":417941,"line_start":69,"line_end":69,"column_start":23,"column_end":41},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1682},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":419072,"byte_end":419077,"line_start":99,"line_end":99,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1738},"to":{"krate":0,"index":1690}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":421432,"byte_end":421439,"line_start":181,"line_end":181,"column_start":13,"column_end":20},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":421714,"byte_end":421721,"line_start":193,"line_end":193,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1712},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":422943,"byte_end":422957,"line_start":228,"line_end":228,"column_start":13,"column_end":27},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,116,114,97,105,116,46,114,115],"byte_start":423242,"byte_end":423256,"line_start":240,"line_end":240,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":425395,"byte_end":425400,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":3292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428499,"byte_end":428504,"line_start":139,"line_end":139,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":7764}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428681,"byte_end":428686,"line_start":146,"line_end":146,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428874,"byte_end":428879,"line_start":154,"line_end":154,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":2620}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":428963,"byte_end":428968,"line_start":160,"line_end":160,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":6638}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":429179,"byte_end":429184,"line_start":170,"line_end":170,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":3314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":445639,"byte_end":445644,"line_start":595,"line_end":595,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":3314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":448658,"byte_end":448663,"line_start":685,"line_end":685,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":3314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":449639,"byte_end":449651,"line_start":717,"line_end":717,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1860},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":450250,"byte_end":450255,"line_start":741,"line_end":741,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1870},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":451227,"byte_end":451233,"line_start":776,"line_end":776,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1878},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":452245,"byte_end":452253,"line_start":810,"line_end":810,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455191,"byte_end":455199,"line_start":882,"line_end":882,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1886},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":455426,"byte_end":455439,"line_start":890,"line_end":890,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1904},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":456486,"byte_end":456494,"line_start":920,"line_end":920,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1886},"to":{"krate":2,"index":2066}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457126,"byte_end":457134,"line_start":941,"line_end":941,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1886},"to":{"krate":2,"index":2066}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":457914,"byte_end":457931,"line_start":964,"line_end":964,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":1922},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":458537,"byte_end":458551,"line_start":982,"line_end":982,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":459222,"byte_end":459229,"line_start":1003,"line_end":1003,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":1938},"to":{"krate":2,"index":3834}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":461504,"byte_end":461515,"line_start":1070,"line_end":1070,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":3320},"to":{"krate":0,"index":1946}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462092,"byte_end":462093,"line_start":1092,"line_end":1092,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":747},"to":{"krate":0,"index":1946}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,114,101,95,117,110,105,99,111,100,101,46,114,115],"byte_start":462708,"byte_end":462716,"line_start":1108,"line_end":1108,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":1970},"to":{"krate":0,"index":1946}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464005,"byte_end":464014,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":3326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,115,112,97,114,115,101,46,114,115],"byte_start":464767,"byte_end":464776,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":3326},"to":{"krate":2,"index":1972}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":465292,"byte_end":465309,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":0,"index":3336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":467008,"byte_end":467013,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[125]},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,97,118,120,50,46,114,115],"byte_start":470796,"byte_end":470801,"line_start":182,"line_end":182,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[126]},"from":{"krate":0,"index":3348},"to":{"krate":2,"index":7760}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":471439,"byte_end":471457,"line_start":17,"line_end":17,"column_start":6,"column_end":24},"kind":{"variant":"Impl","fields":[127]},"from":{"krate":0,"index":3356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":473777,"byte_end":473782,"line_start":85,"line_end":85,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[128]},"from":{"krate":0,"index":3368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,115,97,110,116,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,49,46,48,46,49,47,115,114,99,47,118,101,99,116,111,114,47,115,115,115,101,51,46,114,115],"byte_start":476556,"byte_end":476561,"line_start":187,"line_end":187,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[129]},"from":{"krate":0,"index":3368},"to":{"krate":2,"index":7760}}]}